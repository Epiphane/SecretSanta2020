define(["require", "exports", "../../lib/juicy"], function (require, exports, juicy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class GameScreen extends juicy_1.State {
        constructor(objects) {
            super();
            this.allySpawnZone = new juicy_1.Entity(this, [juicy_1.BoxComponent]);
            this.ambient = new juicy_1.THREE.AmbientLight(0xffffff, 0.5);
            this.directional = new juicy_1.THREE.DirectionalLight(0xffffff, 0.5);
            this.cars = [];
            this.containers = [];
            this.roadObj = new juicy_1.THREE.Group();
            this.worldBase = new juicy_1.THREE.Group();
            this.playerSpeed = 50;
            this.obstacles = new juicy_1.THREE.Group();
            // Lights
            this.scene.add(this.ambient);
            this.scene.add(this.directional);
            this.road = objects.road.clone();
            this.truck1 = objects.truck1.clone();
            this.cars.push(objects.car1.clone());
            this.containers.push(objects.container1.clone());
            this.worldBase.add(this.roadObj);
            this.worldBase.add(this.obstacles);
            this.scene.add(this.worldBase);
            for (let i = -1; i < 10; i++) {
                let block = this.road.clone();
                block.position.z = i * 50;
                this.roadObj.add(block);
            }
            let deer = objects['o deer'].clone();
            deer.position.x = 60;
            deer.position.z = 250;
            deer.rotateY(-Math.PI / 2);
            deer.userData.velocity = new juicy_1.THREE.Vector3(-20, 0, 0);
            deer.userData.life = 10;
            this.obstacles.add(deer);
        }
        init() {
            super.init();
            // this.orthographic(180);
            this.lookAt(new juicy_1.THREE.Vector3(20, 90, -40), new juicy_1.THREE.Vector3(0, 0, 71));
        }
        key_UP() {
            this.camera.position.x++;
        }
        key_DOWN() {
            this.camera.position.x--;
        }
        click(pos) {
            const raycaster = new juicy_1.THREE.Raycaster(); // create once
            raycaster.setFromCamera(pos, this.camera);
            const intersects = raycaster.intersectObjects(this.scene.children, false);
            if (intersects.length > 0) {
                console.log(intersects[0].object.userData);
                intersects[0].object.visible = false;
            }
            // console.log(intersects);
        }
        update(dt) {
            this.worldBase.position.z -= this.playerSpeed * dt;
            let worldPosition = this.roadObj.getWorldPosition(new juicy_1.THREE.Vector3());
            while (worldPosition.z < 0) {
                this.roadObj.position.z += 50;
                worldPosition = this.roadObj.getWorldPosition(new juicy_1.THREE.Vector3());
            }
            this.obstacles.children = this.obstacles.children.filter(obstacle => {
                if (obstacle.userData.velocity instanceof juicy_1.THREE.Vector3) {
                    obstacle.position.addScaledVector(obstacle.userData.velocity, dt);
                }
                if (obstacle.userData.life) {
                    obstacle.userData.life -= dt;
                    if (obstacle.userData.life <= 0) {
                        return false;
                    }
                }
                return true;
            });
            return super.update(dt);
        }
    }
    exports.default = GameScreen;
    ;
});
//# sourceMappingURL=game_screen.js.map